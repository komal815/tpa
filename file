<!DOCTYPE html>
<html>
<head>
    <title>Vis.js Network Example</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
    <style type="text/css">
        #mynetwork {
            width: 800px;
            height: 600px;
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
    <div>
        <select id="directionFilter">
            <option value="all">All</option>
            <option value="incoming">Incoming</option>
            <option value="outgoing">Outgoing</option>
        </select>
    </div>
    <div id="mynetwork"></div>

    <script type="text/javascript">
        // Create an array with nodes
        var nodes = new vis.DataSet([
            { id: 1, label: 'Node 1' },
            { id: 2, label: 'Node 2' },
            { id: 3, label: 'Node 3' },
            { id: 4, label: 'Node 4' },
            { id: 5, label: 'Node 5' }
        ]);






import React, { useState, useEffect, useRef } from 'react';
import { DataSet, Network } from 'vis-network';

const NetworkGraph = ({ nodesData, edgesData }) => {
  const visJsRef = useRef(null);
  const [network, setNetwork] = useState(null);
  const [filteredNodes, setFilteredNodes] = useState(nodesData);

  useEffect(() => {
    if (visJsRef.current && filteredNodes) {
      const data = {
        nodes: new DataSet(filteredNodes),
        edges: new DataSet(edgesData),
      };
      const options = {};
      setNetwork(new Network(visJsRef.current, data, options));
    }
  }, [visJsRef, filteredNodes, edgesData]);

  const filterNodes = (direction) => {
    const filtered = nodesData.filter(node => {
      if (direction === 'incoming') {
        return edgesData.some(edge => edge.to === node.id);
      } else if (direction === 'outgoing') {
        return edgesData.some(edge => edge.from === node.id);
      }
      return true;
    });
    setFilteredNodes(filtered);
  };

  return (
    <div>
      <select onChange={(e) => filterNodes(e.target.value)}>
        <option value="incoming">Incoming</option>
        <option value="outgoing">Outgoing</option>
      </select>
      <div ref={visJsRef} style={{ height: '500px' }} />
    </div>
  );
};

export default NetworkGraph;


        // Create an array with edges
        var edges = new vis.DataSet([
            { from: 1, to: 2 },
            { from: 1, to: 3 },
            { from: 2, to: 4 },
            { from: 2, to: 5 },
            { from: 3, to: 5 }
        ]);

        // Create a network
        var container = document.getElementById('mynetwork');
        var data = {
            nodes: nodes,
            edges: edges
        };
        var options = {};
        var network = new vis.Network(container, data, options);

        // Add event listener to the drop-down
        document.getElementById('directionFilter').addEventListener('change', function() {
            var selectedValue = this.value;
            filterNodes(selectedValue);
        });

        function filterNodes(direction) {
            var filteredNodes = new vis.DataSet(nodes.get());

            if (direction === 'incoming') {
                // Get nodes with incoming edges
                var incomingNodes = new Set(edges.get().map(edge => edge.to));
                filteredNodes = new vis.DataSet(nodes.get().filter(node => incomingNodes.has(node.id)));
            } else if (direction === 'outgoing') {
                // Get nodes with outgoing edges
                var outgoingNodes = new Set(edges.get().map(edge => edge.from));
                filteredNodes = new vis.DataSet(nodes.get().filter(node => outgoingNodes.has(node.id)));
            }

            // Update the network with the filtered nodes
            network.setData({
                nodes: filteredNodes,
                edges: edges
            });
        }
    </script>
</body>
</html>


 public List<GraphNode> getAllNodes(final List<ClientSetupNode> clientSetupNodeList){
        final List<GraphNode> nodes= new ArrayList<>();
        final boolean[] conditionMetForAfs = { false };
        final boolean[] conditionMetForPaysource = { false };

        clientSetupNodeList.forEach(e ->{
            final String id = e.getTpaSeqId();
            final String label = e.getTpaSeqId();
            final String title = e.getDirection();
            String color = colorPalette.get(0);
            final String content = e.toString();
            if(!conditionMetForAfs[0]) {
                if (e.isAFSReleasedTpa() == true) {
                    nodes.add(GraphNode.builder().id("1").label("AFS").title("AFS_Released_TPA").content("AFS_Released_TPA")
                            .color(Color.builder().background("#CF9FFF").build()).x(-300).y(10).shape("ellipse").font(
                                    Font.builder().size(40).build()).build());
                    conditionMetForAfs[0] = true;
                }
            } else if (!conditionMetForPaysource[0]) {
                if (e.isPaysourceSenderTPA()==true) {
                    nodes.add(GraphNode.builder().id("2").label("Paysource").title("Paysource").content("Paysource").color(
                            Color.builder().background("blue").build()).x(-300).y(10).shape("ellipse").font(
                            Font.builder().size(40).build()).build());
                    conditionMetForPaysource[0]=true;
                }
            }
            nodes.add(GraphNode.builder().id(id).label(label).title(title).content(content).color(
                    Color.builder().background(color).build()).build());

        });
//        nodes.get(0).setFixed(true);
        return nodes;
    }




import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class GraphNodeServiceTest {

    @Mock
    private ColorPalette colorPalette; // Mock the ColorPalette class

    @InjectMocks
    private GraphNodeService graphNodeService; // The class containing getAllNodes method

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(colorPalette.get(0)).thenReturn("#FFFFFF"); // Assuming the color palette returns white as the first color
    }

    @Test
    public void testGetAllNodes() {
        List<ClientSetupNode> clientSetupNodeList = new ArrayList<>();
        ClientSetupNode node1 = mock(ClientSetupNode.class);
        when(node1.getTpaSeqId()).thenReturn("node1");
        when(node1.getDirection()).thenReturn("direction1");
        when(node1.isAFSReleasedTpa()).thenReturn(true);
        when(node1.isPaysourceSenderTPA()).thenReturn(false);

        ClientSetupNode node2 = mock(ClientSetupNode.class);
        when(node2.getTpaSeqId()).thenReturn("node2");
        when(node2.getDirection()).thenReturn("direction2");
        when(node2.isAFSReleasedTpa()).thenReturn(false);
        when(node2.isPaysourceSenderTPA()).thenReturn(true);

        clientSetupNodeList.add(node1);
        clientSetupNodeList.add(node2);

        List<GraphNode> result = graphNodeService.getAllNodes(clientSetupNodeList);

        assertEquals(4, result.size()); // 2 original nodes + 2 conditional nodes

        // Check first AFS node
        GraphNode afsNode = result.get(0);
        assertEquals("1", afsNode.getId());
        assertEquals("AFS", afsNode.getLabel());
        assertEquals("AFS_Released_TPA", afsNode.getTitle());
        assertEquals("AFS_Released_TPA", afsNode.getContent());
        assertEquals("#CF9FFF", afsNode.getColor().getBackground());

        // Check first Paysource node
        GraphNode paysourceNode = result.get(1);
        assertEquals("2", paysourceNode.getId());
        assertEquals("Paysource", paysourceNode.getLabel());
        assertEquals("Paysource", paysourceNode.getTitle());
        assertEquals("Paysource", paysourceNode.getContent());
        assertEquals("blue", paysourceNode.getColor().getBackground());

        // Check original nodes
        GraphNode graphNode1 = result.get(2);
        assertEquals("node1", graphNode1.getId());
        assertEquals("node1", graphNode1.getLabel());
        assertEquals("direction1", graphNode1.getTitle());
        assertEquals(node1.toString(), graphNode1.getContent());
        assertEquals("#FFFFFF", graphNode1.getColor().getBackground());

        GraphNode graphNode2 = result.get(3);
        assertEquals("node2", graphNode2.getId());
        assertEquals("node2", graphNode2.getLabel());
        assertEquals("direction2", graphNode2.getTitle());
        assertEquals(node2.toString(), graphNode2.getContent());
        assertEquals("#FFFFFF", graphNode2.getColor().getBackground());
    }
}

