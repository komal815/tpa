GET http://localhost:8080/tpas?ptnrId=somePtnrId
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class H2hDBService {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    public H2hDBService(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public List<ClientSetupNode> getTpasByPartnerId(String ptnrId) {
        String query = "SELECT * FROM TPA_SUM t INNER JOIN PROFILE_SUM p ON t.prof_seq_id = p.prof_seq_id " +
                       "WHERE p.ptnr_id = :ptnrId";

        MapSqlParameterSource params = new MapSqlParameterSource();
        params.addValue("ptnrId", ptnrId);

        return jdbcTemplate.query(query, params, this::mapRowToNode);
    }

    private ClientSetupNode mapRowToNode(ResultSet rs, int rowNum) throws SQLException {
        // Your existing mapping code
    }
}
 public Map<String, ClientSetupNode>  loadTpasFromDB() {
        List<String> intervals = Arrays.asList("01-Jan-03","01-Jan-16","01-Jan-19","01-Jan-21","01-Jan-23","01-Jan-99");
        for(int i=0;i<intervals.size()-2;i++) {
            h2hDBService.getH2HTpaSetups(intervals.get(i),intervals.get(i+1)).forEach( tpaNode -> {
                if (tpaNode != null) {
                    if (allTpas.containsKey(tpaNode.getTpaKeyWithDir())) {
                        dupeTpas.put(tpaNode.getTpaKeyWithDir(), tpaNode);
                    } else {
                        allTpas.put(tpaNode.getTpaKeyWithDir(), tpaNode);
                        partnerIdToTPAs.computeIfAbsent(tpaNode.getPartner(), v -> new ArrayList<>()).add(tpaNode);
                    }
                }
            });
            log.info(" Size of All TPAS post query from start date : Start [" + intervals.get(i) + "Edd: " + intervals.get(i+1) +  " count:[" + allTpas.size() + "]");
        }
        return allTpas;
    }

 public List<ClientSetupNode> getH2HTpaSetups(String startDate, String endDate) {

        MapSqlParameterSource parameters = new MapSqlParameterSource();
        parameters.addValue("startDate", startDate);
        parameters.addValue("endDate", endDate);
        log.info("Parameters fpr the Query " + parameters);
        List<ClientSetupNode> results = getNamedTemplate().query(QUERY, parameters, this::mapRowToNode);
        if (!CollectionUtils.isEmpty(results)) {
            log.info("Size of results in new impl :" + results.size());
        } else {
            log.info("Size of results is null or 0 :");
        }
        return results;
    }


package net.jpmchase.opstool.h2hdata;

import lombok.Builder;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Builder
@Data
@Slf4j
public class ClientSetupNode {               // ClientSetupNode   // Type. H2H TPA, MFTS Route AFS seutp, PaysourceSetup, Camps setup

    public enum ClientSetupType {
        H2H_TPA,
        H2H_SYS_TPA,
        H2H_RCVR_TPA,
        MFT_ROUTE,
        AFS_SETUP,
        NDM_STEP,
        CCAP_SETUP,
        WPI_SETUP
    }


    public enum H2H_TPA_TYPE {
        DEFAULT,
        TRANSL_ENG_H2H,
        TRANSL_ENG_CUSTOM,
        DEST_APP_NM_P2P_LOB,
        DEST_APP_NM_P2P_PARTNER,
        DEST_APP_NM_NDM,
        DEST_APP_NM_PARTNER,
        DEST_APP_NM_TPA_CHAIN,
        DEST_APP_NM_TPA_FileHub,
        DEST_APP_NM_TPA_OBFileHub,

    }

    ClientSetupType nodeType;
    H2H_TPA_TYPE h2hTPAType;

    String nextTpaKey;
    ClientSetupNode nextNode;
    ClientSetupType nextNodeType;

    List<ClientSetupNode> parentNodes;

    String partner;

    //H2H Specific fields.
    String data_type_cd;
    String data_format_cd;
    String tpaKeyWithDir;
    String direction;
    String dest_app_nm;

    String rcvr_id;
    String rcvr_tpa_id;

    boolean isAFSReleasedTpa;
    boolean isPaysourceSenderTPA;
    String trcking_Id;
    String mappedCCAPID;

    String IN_NDM_SCRIPT_TX;
    String OUT_NDM_SCRIPT_TX;
    String IN_MF_DEST_RUN_TSK_SOPT_TX;
    String OUT_MF_DEST_RUN_TSK_SOPT_TX;

    LocalDateTime latestActivityTime;

    Map<Integer,String> xlsRowData;

    String translationEngine;
    String src_data_fmt;
    String trgt_data_fmt;


    public boolean isAFSReleasedInFamily() {
        if (isAFSReleasedTpa) {
            return true;
        } else if(nextNode != null) {
            boolean result = false;
            result |= nextNode.isAFSReleasedInFamily();
            return result;
        } else {
            return false;
        }
    }

    public boolean isIncoming() {
        return StringUtils.equalsIgnoreCase(this.direction,"Incoming");
    }

    public boolean hasTranslationEnginePriority() {
        return StringUtils.equalsIgnoreCase(this.translationEngine,"H2H")
                || StringUtils.equalsIgnoreCase(this.translationEngine,"Custom");
    }

    @Override
    public int hashCode() {
        return Objects.hash(tpaKeyWithDir);
    }
}



 public static final String QUERY =
            "Select p.ptnr_id,IN_NDM_SCRIPT_TX,OUT_NDM_SCRIPT_TX,IN_MF_DEST_RUN_TSK_SOPT_TX, OUT_MF_DEST_RUN_TSK_SOPT_TX,"
                    + "t.TPA_SEQ_ID, t.DATA_TYPE_CD, t.DATA_FMT, t.CORP_NM, t.FILE_TYPE_CD, t.DEST_APPL_NM, t.TRNSL_ENGN_NM, t.BUS_SRV_NM, t.DIR, "
                    + "t.EC_ID, t.RCVR_ID, t.RCVR_TPA_ID, t.TPA_STATUS_CD, t.OTB_SCRTY_TYPE_CD, t.OTB_DELVRY_PTCL_CD, t.REMOTE_ID1_TX, t.REMOTE_ID2_TX, "
                    + "t.REMOTE_ID3_TX, t.SUB_PRODCT_CD, t.E2E_TRCK_FLAG_IN, t.INBND_SCRTY_TYPE_CD, t.SRC_DATA_FMT_CD, t.TRG_DATA_FMT_CD, t.EDI_TRANS_IN,"
                    + " t.DLVR_USNG_LOB_TPA_IN, t.REMV_LOGDX_IN, t.TRANS_SLA_TX, t.UNCMP_RCV_DATA_IN, t.CMP_OUT_DATA_IN, t.CNVT_INDATA_UNIX_IN,"
                    + " t.CNVT_OUTDATA_DOS_IN, t.SELF_TEST_FLAG_IN, t.PMDE_FLAG_IN, t.DLVR_SEC_LOB_IN, t.SEC_LOB_NM_CD, t.FILE_CATGRY_CD,"
                    + " t.FILE_SUB_CATGRY_CD, t.SEC_RCV_ID, t.SEC_RCV_TPA_ID, t.SCRTY_LEVL_CD, t.HASH_NUM_OPT_CD, t.CHIPR_NUM_OPT_CD,"
                    + " t.ENCRYPT_KEY_CD, t.SIGN_KEY_CD, t.L0_POS_ACK_REQ_IN, t.SWFT_RMT_FILE_NM_TX, t.SWFT_FN_CD, t.SWFT_PRFL_NM_TX,"
                    + " t.SWFT_REQ_TYPE_TX, t.SWFT_REQ_DN_CD, t.SWFT_RES_DN_CD, t.SWFT_SERVICE_CD, t.SWFT_FILE_INFO_TX, t.SWFT_FILE_PATH_TX,"
                    + " t.EDINT_REQ_MDN_CD, t.EDINT_FILE_NM_HDR_CD, t.EDINT_FILE_NM_TX, t.EDINT_APND_FILE_NM_PAYLD_IN, t.STATIC_FILE_NM_TX,"
                    + " t.MF_XLATE_FILE_NM_TX, t.MF_APPND_DTSEQ_IN, t.MF_ENCD_TYPE_CD, t.TRCKING_ID, t.IN_TRCKING_REQ_IN, t.IN_MF_NODE_NM_CD,"
                    + " t.IN_MF_APPND_TIMEST_IN, t.IN_MF_NDM_PROC_NM_TX, t.IN_MF_DEST_FILE_NM_TX, t.IN_MF_DEST_RUN_TSK_TX, t.IN_MF_CHAR_ENCD_IN,"
                    + " t.IN_DLVRY_HOST_TX, t.IN_DLVRY_PORT_TX, t.IN_DLVRY_LOC_TX, t.IN_DLVRY_USER_TX, t.IN_DLVRY_FTP_TRANS_MODE_CD, "
                    + "t.IN_DLVRY_CONT_TYPE_TX, t.OUT_TRCKING_REQ_IN, t.OUT_MF_NODE_NM_CD, t.OUT_MF_APPND_TIMEST_IN, t.OUT_MF_NDM_PROC_NM_TX, "
                    + "t.OUT_MF_DEST_FILE_NM_TX, t.OUT_MF_DEST_RUN_TSK_TX, t.OUT_MF_CHAR_ENCD_IN, t.OUT_DLVRY_HOST_TX, t.OUT_DLVRY_PORT_TX, "
                    + "t.OUT_DLVRY_LOC_TX, t.OUT_DLVRY_USER_TX, t.OUT_DLVRY_FTP_TRANS_MODE_CD, t.OUT_DLVRY_CONT_TYPE_TX, t.PROF_SEQ_ID, "
                    + "t.TPA_NAME, t.FILE_FMT_ID, t.SUPP_PRCDR, t.TRNSMN_ENG_TYPE_ID, t.CREATED_BY, t.CREATED_DATE_TIME, t.UPDATED_BY, t.UPDATED_DATE_TIME, "
                    + "t.LAST_TRANS_TS, t.DATA_QLTY, t.DATA_SYNC_STATUS, t.BLOCK_BULK_RESBMT_FLAG, t.FILE_LOC_ID, t.ISVISIBLETPA "
                    + "from TPA_SUM t INNER JOIN PROFile_SUM p on t.prof_seq_Id=p.prof_seq_id where p.ptnr_id_type='H2H' and p.prfl_sts_cd='Active' "
                    + "and t.CREATED_DATE_TIME > (:startDate) and t.CREATED_DATE_TIME <= (:endDate) order by t.CREATED_DATE_TIME ";
