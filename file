if(null!=request && null!=request.getAcks() && null!=request.getAcks().getH2hEmailRoutingLookup() ) {
            List<H2hMultiAckRoutingLookupStaging> h2hMultiAckRoutingLookupStagings = splitterDataStagingMapper.h2hMultiAckRoutingLookupStagingMapping(request, activeProfile);
            h2hMultiAckRoutingLookupStagings.stream().forEach(routingLookup -> {
                StagingResponse stagingResponse = null;
                TableResponse tableResponse = null;
                AddUpdateStagingRequest addUpdateStagingRequest = splitterDataStagingMapper.getH2hH2hMultiAckRoutingLookupDatas(routingLookup,
                        SplitterDataStagingConstants.ADD, routingLookup.getCreatedBy());
                if (StringUtils.equalsIgnoreCase(SplitterDataConstants.PROD, activeProfile)) {
                    stagingResponse = service.createStagingRecord(addUpdateStagingRequest);
                    addDataIntoTrackerTable(stagingResponse.getBody().getH2hMultiAckRoutingLookupStaging().getStagingId(),
                            requestId, tableName + SplitterDataStagingConstants.STAGING, routingLookup.getCreatedBy(), activeProfile);
                } else {
                    tableResponse = service.createSplitterRecord(addUpdateStagingRequest);
                    addDataIntoTrackerTable(tableResponse.getBody().getH2hMultiAckRoutingLookup().getSpltId(),
                            requestId, tableName, routingLookup.getCreatedBy(), activeProfile);
                }
                splitterDataResponses.add(splitterDataStagingMapper.getDataMapping(stagingResponse, tableResponse));
            });
        }
        return splitterDataResponses;



@Test
    void testAddStagingTablesData_ProdEnvironment() {
        // Mock data and input request
        SplitterDataStagingEncapRequest request = new SplitterDataStagingEncapRequest();
        request.setAcks(new AckObject(new H2hEmailRoutingLookup()));

        String activeProfile = "prod";
        when(environment.getProperty("spring.profiles.active")).thenReturn(activeProfile);

        List<H2hMultiAckRoutingLookupStaging> routingLookups = new ArrayList<>();
        routingLookups.add(new H2hMultiAckRoutingLookupStaging());
        
        when(splitterDataStagingMapper.h2hMultiAckRoutingLookupStagingMapping(any(), eq(activeProfile)))
            .thenReturn(routingLookups);
        
        StagingResponse stagingResponse = new StagingResponse();
        when(service.createStagingRecord(any())).thenReturn(stagingResponse);
        
        // Call method under test
        List<Response> responseList = yourService.addStagingTablesData(request);

        // Verify interactions and assertions
        verify(service, times(1)).createStagingRecord(any());
        verify(splitterDataStagingMapper, times(1)).getH2hH2hMultiAckRoutingLookupDatas(any(), any(), any());
        assertEquals(1, responseList.size());
    }

    @Test
    void testAddStagingTablesData_NonProdEnvironment() {
        // Mock data and input request
        SplitterDataStagingEncapRequest request = new SplitterDataStagingEncapRequest();
        request.setAcks(new AckObject(new H2hEmailRoutingLookup()));

        String activeProfile = "dev";
        when(environment.getProperty("spring.profiles.active")).thenReturn(activeProfile);

        List<H2hMultiAckRoutingLookupStaging> routingLookups = new ArrayList<>();
        routingLookups.add(new H2hMultiAckRoutingLookupStaging());
        
        when(splitterDataStagingMapper.h2hMultiAckRoutingLookupStagingMapping(any(), eq(activeProfile)))
            .thenReturn(routingLookups);
        
        TableResponse tableResponse = new TableResponse();
        when(service.createSplitterRecord(any())).thenReturn(tableResponse);
        
        // Call method under test
        List<Response> responseList = yourService.addStagingTablesData(request);

        // Verify interactions and assertions
        verify(service, times(1)).createSplitterRecord(any());
        verify(splitterDataStagingMapper, times(1)).getH2hH2hMultiAckRoutingLookupDatas(any(), any(), any());
        assertEquals(1, responseList.size());
    }
