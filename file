package com.jpmorganchase.cib.h2h.opstool.sci;

import com.google.gson.Gson;
import com.jpmorganchase.cib.h2h.opstool.sci.cache.SCICache;
import com.jpmorganchase.cib.h2h.opstool.sci.model.SCIModel;
import com.jpmorganchase.cib.h2h.opstool.sci.model.SCIResponse;
import com.jpmorganchase.cib.h2h.opstool.sci.service.SCIService;
import com.opencsv.CSVWriter;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static com.jpmorganchase.cib.h2h.opstool.sci.cache.SCICache.*;

@RestController
@Slf4j
@RequestMapping("/api/excel")
public class SCIController {

    @Autowired
    private SCIService sciService;

    @PostMapping("/downloadReport")
    public ResponseEntity<String> downloadReport(@RequestParam("file1")MultipartFile originalFile, @RequestParam("file2")MultipartFile h2hDataFile) throws
            IOException{
        if(originalFile.isEmpty() || h2hDataFile.isEmpty()){
            return ResponseEntity.badRequest().body("file is Empty");
        }
        long startTime = System.currentTimeMillis();
        log.info(" starting file dowload Report  with start time {}", startTime);
        SCICache.cleanCache();
        sciService.extractUniqueIdToXmitIdDetails(originalFile.getInputStream());
        sciService.readExcelForH2hData(h2hDataFile.getInputStream());
        sciService.createUniqueKeyToSCIModelMap();
        log.info(" size of unique key to SCI Model Map{}", uniqueKeyToSCIModelMap.size());
        sciService.updateSciModelwithCCNAndE2eId();
        sciService.updateFilePathName();
        sciService.processExtraction();

        writeWithOpenCSV(uniqueIdToExtractedResponseMap);

        long endTime = System.currentTimeMillis();
        log.info(" Ending file dowload process for 1st batch  with end time {}", endTime);
        log.info(" Total time taken in sec {}", (endTime-startTime)/1000);
        return ResponseEntity.ok("files uploaded successfully");
    }


    @PostMapping("/runLLExtraction")
    public ResponseEntity<InputStreamResource> downloadFile(@RequestParam("file1")MultipartFile originalFile, @RequestParam("file2")MultipartFile h2hDataFile) throws
            IOException{
        if(originalFile.isEmpty() || h2hDataFile.isEmpty()){
            return ResponseEntity.badRequest().
                    body(new InputStreamResource(new FileInputStream("File is Empty")));
        }
        long startTime = System.currentTimeMillis();
        log.info(" starting file downloadFile  with start time {}", startTime);
        SCICache.cleanCache();
        sciService.extractUniqueIdToXmitIdDetails(originalFile.getInputStream());
        sciService.readExcelForH2hData(h2hDataFile.getInputStream());
        sciService.createUniqueKeyToSCIModelMap();
        log.info(" size of unique key to SCI Model Map{}", uniqueKeyToSCIModelMap.size());
        sciService.updateSciModelwithCCNAndE2eId();
        sciService.updateFilePathName();
        sciService.processExtraction();


        long endTime = System.currentTimeMillis();
        log.info(" Ending file dowload process for 1st batch  with end time {}", endTime);
        log.info(" Total time taken in sec {}", (endTime-startTime)/1000);
        return getFile(uniqueIdToExtractedResponseMap);

    }

    @PostMapping("/downloadFilesToNAS")
    public ResponseEntity<InputStreamResource> downloadFilesToNAS(@RequestParam("file1")MultipartFile originalFile, @RequestParam("file2")MultipartFile h2hDataFile ,@RequestParam("cloudCertId")String cloudCertId) throws
            IOException{
        if(originalFile.isEmpty() || h2hDataFile.isEmpty()){
            return ResponseEntity.badRequest().
                    body(new InputStreamResource(new FileInputStream("File is Empty")));
        }
        long startTime = System.currentTimeMillis();
        log.info(" starting file dowload process for 1st batch  with start time {}", startTime);
        SCICache.cleanCache();
        sciService.extractUniqueIdToXmitIdDetails(originalFile.getInputStream());
        sciService.readExcelForH2hData(h2hDataFile.getInputStream());
        sciService.createUniqueKeyToSCIModelMap();
        sciService.updateSciModelwithCCNAndE2eId();
        sciService.processDownloadForAll(cloudCertId);

//        writeDownloadCSV(xmitIdDownloadStatusMap);


        long endTime = System.currentTimeMillis();
        log.info(" Ending file dowload process for 1st batch  with end time {}", endTime);
        log.info(" Total time taken in sec {}", (endTime-startTime)/1000);
        return getResponseAsFile(xmitIdDownloadStatusMap);
    }

    private void writeDownloadCSV(final Map<String, SCIModel> xmitIdDownloadStatusMap) throws IOException {
        if(!xmitIdDownloadStatusMap.isEmpty()){
            String fileName = "SCIFileDownLoadResponse_"+Math.random()+".csv";
            try(Writer writer = new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8);
                    CSVWriter csvWriter = new CSVWriter(writer)) {

                Class<?> clazz = SCIModel.class;

                Field[] fields = clazz.getDeclaredFields();
                String[] headers = new String[fields.length];
                for (int i = 0; i < fields.length; i++) {
                    headers[i] = fields[i].getName();
                }
                csvWriter.writeNext(headers);

                for (final Map.Entry<String, SCIModel> entry : xmitIdDownloadStatusMap.entrySet()) {
                    //
                    csvWriter.writeNext(entry.getValue().toArray());

                }
            }
            log.info(" download files report successfully written with name {}",fileName);
        }
    }



    private ResponseEntity<InputStreamResource> getResponseAsFile(final Map<String, SCIModel> xmitIdDownloadStatusMap) throws IOException {
        if(!xmitIdDownloadStatusMap.isEmpty()){
            String fileName = "SCIFileDownLoadResponse_"+Math.random()+".csv";
            try(Writer writer = new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8);
                    CSVWriter csvWriter = new CSVWriter(writer)) {

                Class<?> clazz = SCIModel.class;

                Field[] fields = clazz.getDeclaredFields();
                String[] headers = new String[fields.length];
                for (int i = 0; i < fields.length; i++) {
                    headers[i] = fields[i].getName();
                }
                csvWriter.writeNext(headers);

                for (final Map.Entry<String, SCIModel> entry : xmitIdDownloadStatusMap.entrySet()) {
                    //
                    csvWriter.writeNext(entry.getValue().toArray());

                }
            }

            log.info(" download files report successfully written with name {}",fileName);
            File file = new File(fileName);

            FileInputStream inputStream = new FileInputStream(file);
            InputStreamResource inputStreamResource = new InputStreamResource(inputStream);
            HttpHeaders headers  = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION,"attachment : filename="+file.getName());
            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(file.length())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(inputStreamResource);
        }
        return null;
    }


    private void writeCSV(final Map<String, SCIResponse> xmitIdDownloadStatusMap) throws IOException {
        try(BufferedWriter writer = new BufferedWriter(new FileWriter("extract1.csv"))){

            Class<?> clazz  = SCIResponse.class;
            Field[] fields = clazz.getDeclaredFields();
            for(int i = 0;i< fields.length;i++){
                writer.write(fields[i].getName());
                if(i<fields.length-1){
                    writer.write(",");
                }
            }
            writer.newLine();
            for(final Map.Entry<String, SCIResponse> entry : xmitIdDownloadStatusMap.entrySet()){
                //
                for(int i =0;i< fields.length;i++){
                    fields[i].setAccessible(true);
                    writer.write(String.valueOf(fields[i].get(entry.getValue())));
                    if(i<fields.length-1){
                        writer.write(",");
                    }
                }
                writer.newLine();
            }
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }
    private ResponseEntity<InputStreamResource> getFile(final Map<String, SCIResponse> xmitIdDownloadStatusMap) throws IOException {
        String fileName = "SCIFileDownLoadResponse_"+Math.random()+".csv";

        try(Writer writer = new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8);
                CSVWriter csvWriter = new CSVWriter(writer)){

            Class<?> clazz  = SCIResponse.class;

            Field[] fields = clazz.getDeclaredFields();
            String [] headers = new String[fields.length];
            for (int i = 0; i< fields.length;i++){
                headers[i] = fields[i].getName();
            }
            csvWriter.writeNext(headers);

            for(final Map.Entry<String, SCIResponse> entry : xmitIdDownloadStatusMap.entrySet()){
                //
                csvWriter.writeNext(entry.getValue().toArray());
            }
        }

        File file = new File(fileName);

        FileInputStream inputStream = new FileInputStream(file);
        InputStreamResource inputStreamResource = new InputStreamResource(inputStream);
        HttpHeaders headers  = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION,"attachment : filename="+file.getName());
        return ResponseEntity.ok()
                .headers(headers)
                .contentLength(file.length())
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(inputStreamResource);
    }
    private void writeWithOpenCSV(final Map<String, SCIResponse> xmitIdDownloadStatusMap) throws IOException {
        try(Writer writer = new OutputStreamWriter(new FileOutputStream("SCIResponse_"+Math.random()+".csv"), StandardCharsets.UTF_8);
                CSVWriter csvWriter = new CSVWriter(writer)){

            Class<?> clazz  = SCIResponse.class;

            Field[] fields = clazz.getDeclaredFields();
            String [] headers = new String[fields.length];
            for (int i = 0; i< fields.length;i++){
                headers[i] = fields[i].getName();
            }
            csvWriter.writeNext(headers);

            for(final Map.Entry<String, SCIResponse> entry : xmitIdDownloadStatusMap.entrySet()){
                //
                csvWriter.writeNext(entry.getValue().toArray());

            }
        }
    }

    @PostMapping("/uploadExcel")
    public ResponseEntity<List<List<String>>> uploadExcel(@RequestParam("file")MultipartFile file ) throws
            IOException{
        List<List<String>> excelData = new ArrayList<>();
        if(file.isEmpty()){
            return ResponseEntity.badRequest().body(null);
        }
        try(Workbook workbook = new XSSFWorkbook(file.getInputStream())){
            Sheet sheet = workbook.getSheetAt(0);
            for(Row row: sheet){
                List<String> rowData = new ArrayList<>();
                for(Cell cell:row){
                    switch(cell.getCellType()){
                        case STRING :
                            rowData.add(cell.getStringCellValue());
                            break;
                        case NUMERIC:
                            rowData.add(String.valueOf(cell.getNumericCellValue()));
                            break;
                        case BOOLEAN:
                            rowData.add(String.valueOf(cell.getBooleanCellValue()));
                            break;
                        default:
                            rowData.add(" ");
                    }
                }
                excelData.add(rowData);
            }

        }
        return ResponseEntity.ok(excelData);
    }


    @GetMapping("/checkStatus")
    public ResponseEntity<String> checkStatus() {
        return ResponseEntity.ok("OK");
    }

    @PostMapping("/extractData")
    public SCIResponse extractData(@RequestBody SCIModel parseFileInputRq) {
        log.info("Inside ReadFileController - extractData : ParseFileInputRq - " + parseFileInputRq);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<SCIModel> request = new HttpEntity<>(parseFileInputRq, headers);
        log.info("calling nAS service");
        return new RestTemplate().exchange("https://opstool-gateway-service-pp-green-test.apps.prod.na-6x.gap.jpmchase.net/NAS/extractData", HttpMethod.POST,request, SCIResponse.class).getBody();
    }

    public static void main(String[] args) {
        SCIModel model = SCIModel.builder().e2eId("S90290000969424").xmitId("100001019885188")
                .filePathName("/data/fms/LLE/C5/ALIPAYUS.PAYSOURCE.ISO20022_PAIN_01Ver5.100001019885188.20240702213542").build();
        log.info("model {} ",new Gson().toJson(model));
    }

}
