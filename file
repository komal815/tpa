if(null!=request && null!=request.getAcks() && null!=request.getAcks().getH2hEmailRoutingLookup() ) {
            List<H2hMultiAckRoutingLookupStaging> h2hMultiAckRoutingLookupStagings = splitterDataStagingMapper.h2hMultiAckRoutingLookupStagingMapping(request, activeProfile);
            h2hMultiAckRoutingLookupStagings.stream().forEach(routingLookup -> {
                StagingResponse stagingResponse = null;
                TableResponse tableResponse = null;
                AddUpdateStagingRequest addUpdateStagingRequest = splitterDataStagingMapper.getH2hH2hMultiAckRoutingLookupDatas(routingLookup,
                        SplitterDataStagingConstants.ADD, routingLookup.getCreatedBy());
                if (StringUtils.equalsIgnoreCase(SplitterDataConstants.PROD, activeProfile)) {
                    stagingResponse = service.createStagingRecord(addUpdateStagingRequest);
                    addDataIntoTrackerTable(stagingResponse.getBody().getH2hMultiAckRoutingLookupStaging().getStagingId(),
                            requestId, tableName + SplitterDataStagingConstants.STAGING, routingLookup.getCreatedBy(), activeProfile);
                } else {
                    tableResponse = service.createSplitterRecord(addUpdateStagingRequest);
                    addDataIntoTrackerTable(tableResponse.getBody().getH2hMultiAckRoutingLookup().getSpltId(),
                            requestId, tableName, routingLookup.getCreatedBy(), activeProfile);
                }
                splitterDataResponses.add(splitterDataStagingMapper.getDataMapping(stagingResponse, tableResponse));
            });
        }
        return splitterDataResponses;
