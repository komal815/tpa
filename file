{id: 1, label: "AFS Upload Hop Node", title: "node 1 tooltip Text"},
        {id: 2, label: "H2H Direct Send", title: "node 2 tooltip Text"},
        {id: 3, label: "H2H TPA1", title: "node 3 tooltip Text"},
        {id: 4, label: "H2H TPA2", title: "node 4 tooltip Text"},
        {id: 5, label: "H2H Paysource Delivery TPA", title: "node 5 tooltip Text"},
        {id: 6, label: "WPI", title: "node 6 tooltip Text"},
        {id: 7, label: "MFT Hop", title: "node 7 tooltip Text"},
        {id: 8, label: "Paysource", title: "node 8 tooltip Text"},

        {id: 11, label: "H2H TPA1", title: "node 11 tooltip Text"},
        {id: 12, label: "H2H TPA2", title: "node 12 tooltip Text"},
        {id: 13, label: "H2H Paysource Delivery TPA", title: "node 13 tooltip Text"},
        {id: 14, label: "WPI", title: "node 14 tooltip Text"},
        {id: 15, label: "MFT Hop", title: "node 15 tooltip Text"},
        {id: 16, label: "Paysource", title: "node 16 tooltip Text"},
        {id: 17, label: "AFS Upload Hop Node", title: "node 17 tooltip Text"},
        {id: 18, label: "H2H Direct Send", title: "node 18 tooltip Text"},
        {id: 19, label: "H2H TPA1", title: "node 19 tooltip Text"},
        {id: 20, label: "H2H TPA2", title: "node 20 tooltip Text"},
        // {id: 21, label: "H2H Paysource Delivery TPA", title: "node 21 tooltip Text"},
        {id: 22, label: "WPI", title: "node 22 tooltip Text"},
        {id: 23, label: "MFT Hop", title: "node 23 tooltip Text"},
        {id: 24, label: "Paysource", title: "node 24 tooltip Text"},
        {id: 25, label: "AFS Upload Hop Node", title: "node 25 tooltip Text"},
        {id: 26, label: "H2H Direct Send", title: "node 26 tooltip Text"},
        {id: 27, label: "H2H TPA1", title: "node 27 tooltip Text"},
        {id: 28, label: "H2H TPA2", title: "node 28 tooltip Text"},
        {id: 29, label: "H2H Paysource Delivery TPA", title: "node 29 tooltip Text"},
        {id: 30, label: "WPI", title: "node 30 tooltip Text"},
        {id: 31, label: "MFT Hop", title: "node 31 tooltip Text"},
        {id: 32, label: "Paysource", title: "node 32 tooltip Text"},
        {id: 33, label: "AFS Upload Hop Node", title: "node 33 tooltip Text"},
        {id: 34, label: "H2H Direct Send", title: "node 34 tooltip Text"},
        {id: 35, label: "H2H TPA1", title: "node 35 tooltip Text"},

        {id: 37, label: "H2H Paysource Delivery TPA", title: "node 37 tooltip Text"},
        // {id: 40, label: "Paysource", title: "node 40 tooltip Text"},
        {id: 43, label: "H2H TPA1", title: "node 43 tooltip Text"},
        {id: 44, label: "H2H TPA2", title: "node 44 tooltip Text"},
        {id: 45, label: "H2H Paysource Delivery TPA", title: "node 45 tooltip Text"},
        {id: 46, label: "WPI", title: "node 46 tooltip Text"},
        {id: 47, label: "MFT Hop", title: "node 47 tooltip Text"},
        {id: 48, label: "Paysource", title: "node 48 tooltip Text"},
        // {id: 49, label: "AFS Upload Hop Node", title: "node 49 tooltip Text"},
        {id: 51, label: "H2H TPA1", title: "node 51 tooltip Text"},
        {id: 52, label: "H2H TPA2", title: "node 52 tooltip Text"},
        {id: 53, label: "H2H Paysource Delivery TPA", title: "node 53 tooltip Text"},
        {id: 54, label: "WPI", title: "node 54 tooltip Text"},
        {id: 55, label: "MFT Hop", title: "node 55 tooltip Text"},
        {id: 56, label: "Paysource", title: "node 56 tooltip Text"},
        {id: 57, label: "AFS Upload Hop Node", title: "node 57 tooltip Text"},
        {id: 58, label: "H2H Direct Send", title: "node 58 tooltip Text"},
        {id: 59, label: "H2H TPA1", title: "node 59 tooltip Text"},
        {id: 60, label: "H2H TPA2", title: "node 60 tooltip Text"},
        {id: 61, label: "H2H Paysource Delivery TPA", title: "node 61 tooltip Text"},
        {id: 62, label: "WPI", title: "node 62 tooltip Text"},{id: 1, label: "AFS Upload Hop Node", title: "node 1 tooltip Text"},
        {id: 2, label: "H2H Direct Send", title: "node 2 tooltip Text"},
        {id: 3, label: "H2H TPA1", title: "node 3 tooltip Text"},
        {id: 4, label: "H2H TPA2", title: "node 4 tooltip Text"},
        {id: 5, label: "H2H Paysource Delivery TPA", title: "node 5 tooltip Text"},
        {id: 6, label: "WPI", title: "node 6 tooltip Text"},
        {id: 7, label: "MFT Hop", title: "node 7 tooltip Text"},
        {id: 8, label: "Paysource", title: "node 8 tooltip Text"},

        {id: 11, label: "H2H TPA1", title: "node 11 tooltip Text"},
        {id: 12, label: "H2H TPA2", title: "node 12 tooltip Text"},
        {id: 13, label: "H2H Paysource Delivery TPA", title: "node 13 tooltip Text"},
        {id: 14, label: "WPI", title: "node 14 tooltip Text"},
        {id: 15, label: "MFT Hop", title: "node 15 tooltip Text"},
        {id: 16, label: "Paysource", title: "node 16 tooltip Text"},
        {id: 17, label: "AFS Upload Hop Node", title: "node 17 tooltip Text"},
        {id: 18, label: "H2H Direct Send", title: "node 18 tooltip Text"},
        {id: 19, label: "H2H TPA1", title: "node 19 tooltip Text"},
        {id: 20, label: "H2H TPA2", title: "node 20 tooltip Text"},
        // {id: 21, label: "H2H Paysource Delivery TPA", title: "node 21 tooltip Text"},
        {id: 22, label: "WPI", title: "node 22 tooltip Text"},
        {id: 23, label: "MFT Hop", title: "node 23 tooltip Text"},
        {id: 24, label: "Paysource", title: "node 24 tooltip Text"},
        {id: 25, label: "AFS Upload Hop Node", title: "node 25 tooltip Text"},
        {id: 26, label: "H2H Direct Send", title: "node 26 tooltip Text"},
        {id: 27, label: "H2H TPA1", title: "node 27 tooltip Text"},
        {id: 28, label: "H2H TPA2", title: "node 28 tooltip Text"},
        {id: 29, label: "H2H Paysource Delivery TPA", title: "node 29 tooltip Text"},
        {id: 30, label: "WPI", title: "node 30 tooltip Text"},
        {id: 31, label: "MFT Hop", title: "node 31 tooltip Text"},
        {id: 32, label: "Paysource", title: "node 32 tooltip Text"},
        {id: 33, label: "AFS Upload Hop Node", title: "node 33 tooltip Text"},
        {id: 34, label: "H2H Direct Send", title: "node 34 tooltip Text"},
        {id: 35, label: "H2H TPA1", title: "node 35 tooltip Text"},

        {id: 37, label: "H2H Paysource Delivery TPA", title: "node 37 tooltip Text"},
        // {id: 40, label: "Paysource", title: "node 40 tooltip Text"},
        {id: 43, label: "H2H TPA1", title: "node 43 tooltip Text"},
        {id: 44, label: "H2H TPA2", title: "node 44 tooltip Text"},
        {id: 45, label: "H2H Paysource Delivery TPA", title: "node 45 tooltip Text"},
        {id: 46, label: "WPI", title: "node 46 tooltip Text"},
        {id: 47, label: "MFT Hop", title: "node 47 tooltip Text"},
        {id: 48, label: "Paysource", title: "node 48 tooltip Text"},
        // {id: 49, label: "AFS Upload Hop Node", title: "node 49 tooltip Text"},
        {id: 51, label: "H2H TPA1", title: "node 51 tooltip Text"},
        {id: 52, label: "H2H TPA2", title: "node 52 tooltip Text"},
        {id: 53, label: "H2H Paysource Delivery TPA", title: "node 53 tooltip Text"},
        {id: 54, label: "WPI", title: "node 54 tooltip Text"},
        {id: 55, label: "MFT Hop", title: "node 55 tooltip Text"},
        {id: 56, label: "Paysource", title: "node 56 tooltip Text"},
        {id: 57, label: "AFS Upload Hop Node", title: "node 57 tooltip Text"},
        {id: 58, label: "H2H Direct Send", title: "node 58 tooltip Text"},


 @GetMapping
    public List<Node> getNodes() {
        return Arrays.asList(
            new Node(1, "AFS Upload Hop Node", "node 1 tooltip Text"),
            new Node(2, "H2H Direct Send", "node 2 tooltip Text"),
            new Node(3, "H2H TPA1", "node 3 tooltip Text"),
            new Node(4, "H2H TPA2", "node 4 tooltip Text"),
            new Node(5, "H2H Paysource Delivery TPA", "node 5 tooltip Text"),
            new Node(6, "WPI", "node 6 tooltip Text"),
            new Node(7, "MFT Hop", "node 7 tooltip Text"),
            new Node(8, "Paysource", "node 8 tooltip Text"),
            new Node(11, "H2H TPA1", "node 11 tooltip Text"),
            new Node(12, "H2H TPA2", "node 12 tooltip Text"),
            new Node(13, "H2H Paysource Delivery TPA", "node 13 tooltip Text"),
            new Node(14, "WPI", "node 14 tooltip Text"),
            new Node(15, "MFT Hop", "node 15 tooltip Text"),
            new Node(16, "Paysource", "node 16 tooltip Text"),
            new Node(17, "AFS Upload Hop Node", "node 17 tooltip Text"),
            new Node(18, "H2H Direct Send", "node 18 tooltip Text"),
            new Node(19, "H2H TPA1", "node 19 tooltip Text"),
            new Node(20, "H2H TPA2", "node 20 tooltip Text"),
            new Node(22, "WPI", "node 22 tooltip Text"),
            new Node(23, "MFT Hop", "node 23 tooltip Text"),
            new Node(24, "Paysource", "node 24 tooltip Text"),
            new Node(25, "AFS Upload Hop Node", "node 25 tooltip Text"),
            new Node(26, "H2H Direct Send", "node 26 tooltip Text"),
            new Node(27, "H2H TPA1", "node 27 tooltip Text"),
            new Node(28, "H2H TPA2", "node 28 tooltip Text"),
            new Node(29, "H2H Paysource Delivery TPA", "node 29 tooltip Text"),
            new Node(30, "WPI", "node 30 tooltip Text"),
            new Node(31, "MFT Hop", "node 31 tooltip Text"),
            new Node(32, "Paysource", "node 32 tooltip Text"),
            new Node(33, "AFS Upload Hop Node", "node 33 tooltip Text"),
            new Node(34, "H2H Direct Send", "node 34 tooltip Text"),
            new Node(35, "H2H TPA1", "node 35 tooltip Text"),
            new Node(37, "H2H Paysource Delivery TPA", "node 37 tooltip Text"),
            new Node(43, "H2H TPA1", "node 43 tooltip Text"),
            new Node(44, "H2H TPA2", "node 44 tooltip Text"),
            new Node(45, "H2H Paysource Delivery TPA", "node 45 tooltip Text"),
            new Node(46, "WPI", "node 46 tooltip Text"),
            new Node(47, "MFT Hop", "node 47 tooltip Text"),
            new Node(48, "Paysource", "node 48 tooltip Text"),
            new Node(51, "H2H TPA1", "node 51 tooltip Text"),
            new Node(52, "H2H TPA2", "node 52 tooltip Text"),
            new Node(53, "H2H Paysource Delivery TPA", "node 53 tooltip Text"),
            new Node(54, "WPI", "node 54 tooltip Text"),
            new Node(55, "MFT Hop", "node 55 tooltip Text"),
            new Node(56, "Paysource", "node 56 tooltip Text"),
            new Node(57, "AFS Upload Hop Node", "node 57 tooltip Text"),
            new Node(58, "H2H Direct Send", "node 58 tooltip Text"),
            new Node(59, "H2H TPA1", "node 59 tooltip Text"),
            new Node(60, "H2H TPA2", "node 60 tooltip Text"),
            new Node(61, "H2H Paysource Delivery TPA", "node 61 tooltip Text"),
            new Node(62, "WPI", "node 62 tooltip Text")
        );
    }
        {id: 59, label: "H2H TPA1", title: "node 59 tooltip Text"},
        {id: 60, label: "H2H TPA2", title: "node 60 tooltip Text"},
        {id: 61, label: "H2H Paysource Delivery TPA", title: "node 61 tooltip Text"},
        {id: 62, label: "WPI", title: "node 62 tooltip Text"},



ChatGPT
 the number of edges pointing to each node
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Vis.js Dynamic Node Size</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
    <style>
        #mynetwork {
            width: 600px;
            height: 400px;
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
<div id="mynetwork"></div>
<script type="text/javascript">
    // Define the nodes
    var nodes = new vis.DataSet([
        { id: 1, label: 'Node 1' },
        { id: 2, label: 'Node 2' },
        { id: 3, label: 'Node 3' },
        { id: 4, label: 'Node 4' },
        { id: 5, label: 'Node 5' }
    ]);

    // Define the edges
    var edges = new vis.DataSet([
        { from: 1, to: 3 },
        { from: 2, to: 3 },
        { from: 4, to: 3 },
        { from: 5, to: 3 },
        { from: 1, to: 2 },
        { from: 2, to: 5 }
    ]);

    // Create a network
    var container = document.getElementById('mynetwork');
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {
        nodes: {
            shape: 'dot',
            size: 10
        }
    };
    var network = new vis.Network(container, data, options);

    // Adjust node sizes based on the number of incoming edges
    var edgeCount = {};

    edges.forEach(function(edge) {
        if (edgeCount[edge.to]) {
            edgeCount[edge.to]++;
        } else {
            edgeCount[edge.to] = 1;
        }
    });

    nodes.forEach(function(node) {
        if (edgeCount[node.id] > 3) {
            nodes.update({ id: node.id, size: 30 }); // Increase size if more than 3 edges
        }
    });


  public List<GraphNode> getAllNodes(){
        return List.of(
//                GraphNode.builder().id(1).label("Client").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
//                GraphNode.builder().id(2).label("H2H Online").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(3).label("H2H Online Released").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(4).label("Paysource").title("node 1 tooltip Text").color(Color.builder().background("#CF9FFF").build()).build(),
//                GraphNode.builder().id(5).label("Standard TPA").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(6).label("Ack Delivery").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(7).label("Ack Formatter").title("node 1 tooltip Text").build()
                GraphNode.builder().id(1).label("Client 1").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(2).label("Client 2").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(3).label("Client 3").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(4).label("Aggregator").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).build(),
                GraphNode.builder().id(5).label("H2H Online").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(6).label("AFS Released").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(7).label("DropBox TPA").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(8).label("Client 1").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(9).label("Client 2").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(10).label("Client 3").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(11).label("Ack Delivery").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(13).label("Paysource").title("node 1 tooltip Text").color(Color.builder().background("#CF9FFF").build()).build()
        );
    }


@Data
@Builder
public class GraphNode {

    private Integer id;
    private String label;
    private Boolean fixed;
    private String title;
    private Color color;
}


@Data
@Builder
public class Color {
    private String color;
    private String background;
}



ChatGPT

public List<GraphNode> getAllNodes(){
        return List.of(
//                GraphNode.builder().id(1).label("Client").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
//                GraphNode.builder().id(2).label("H2H Online").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(3).label("H2H Online Released").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(4).label("Paysource").title("node 1 tooltip Text").color(Color.builder().background("#CF9FFF").build()).build(),
//                GraphNode.builder().id(5).label("Standard TPA").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(6).label("Ack Delivery").title("node 1 tooltip Text").build(),
//                GraphNode.builder().id(7).label("Ack Formatter").title("node 1 tooltip Text").build()
                GraphNode.builder().id(1).label("Client 1").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(2).label("Client 2").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(3).label("Client 3").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).fixed(true).build(),
                GraphNode.builder().id(4).label("Aggregator").title("node 1 tooltip Text").color(Color.builder().background("#cdffcd").build()).build(),
                GraphNode.builder().id(5).label("H2H Online").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(6).label("AFS Released").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(7).label("DropBox TPA").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(8).label("Client 1").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(9).label("Client 2").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(10).label("Client 3").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(11).label("Ack Delivery").title("node 1 tooltip Text").build(),
                GraphNode.builder().id(13).label("Paysource").title("node 1 tooltip Text").color(Color.builder().background("#CF9FFF").build()).build()
        );
    }


@Data
@Builder
public class GraphNode {

    private Integer id;
    private String label;
    private Boolean fixed;
    private String title;
    private Color color;
}


@Data
@Builder
public class Color {
    private String color;
    private String background;
}
ChatGPT
This code defines a method getAllNodes that returns a list of GraphNode objects, each representing a node in a graph. The GraphNode and Color classes are built using the Lombok @Data and @Builder annotations to simplify the creation of immutable objects.

getAllNodes Method
The getAllNodes method constructs a list of GraphNode instances using the GraphNode.builder() pattern. Each GraphNode has an id, label, title, color (optional), and a fixed property (optional).

Here’s a breakdown of the GraphNode instances created in this method:

Node with ID 1, 2, 3: Represents a "Client" with a fixed position and specific background color #cdffcd.
Node with ID 4: Represents an "Aggregator" with the same background color but not fixed.
Node with ID 5: Represents "H2H Online."
Node with ID 6: Represents "AFS Released."
Node with ID 7: Represents "DropBox TPA."
Node with IDs 8, 9, 10: Represent additional "Client" nodes.
Node with ID 11: Represents "Ack Delivery."
Node with ID 13: Represents "Paysource" with a background color #CF9FFF.
GraphNode Class
The GraphNode class defines the structure of a node:

java
Copy code
@Data
@Builder
public class GraphNode {
    private Integer id;
    private String label;
    private Boolean fixed;
    private String title;
    private Color color;
}
Color Class
The Color class holds color-related information:

java
Copy code
@Data
@Builder
public class Color {
    private String color;
    private String background;
}
Usage of Lombok Annotations
@Data: Generates getters, setters, toString(), equals(), and hashCode() methods.
@Builder: Implements the builder pattern to simplify object creation, allowing you to specify properties in a chainable manner.
Summary
The getAllNodes method creates a list of nodes with varying properties, suitable for visual graph representation. The GraphNode and Color classes, using Lombok, facilitate easy creation and manipulation of these objects. This method allows for flexibility in defining node properties such as color and fixed positioning within the graph.




Write the junits for this class
ChatGPT
To write JUnit tests for the getAllNodes method and its associated classes (GraphNode and Color), you need to ensure that the method returns the correct nodes with the expected properties. Below are the JUnit 5 tests, including necessary setup and assertions.

Dependencies
Ensure you have the following dependencies in your pom.xml (for Maven) or build.gradle (for Gradle) to include JUnit 5 and Lombok.

Maven (pom.xml):

xml
Copy code
<dependencies>
    <!-- JUnit 5 -->
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>5.9.3</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>5.9.3</version>
        <scope>test</scope>
    </dependency>
    <!-- Lombok -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.26</version>
        <scope>provided</scope>
    </dependency>
</dependencies>
Gradle (build.gradle):

groovy
Copy code
dependencies {
    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}
Test Class
Create a test class for your method in src/test/java:

java
Copy code
import org.junit.jupiter.api.Test;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

public class GraphNodeTest {

    @Test
    public void testGetAllNodes() {
        // Instantiate the class that contains the getAllNodes method
        List<GraphNode> nodes = new YourClassName().getAllNodes();
        
        // Assert the size of the list
        assertEquals(12, nodes.size(), "The size of the nodes list should be 12");

        // Test specific nodes
        GraphNode node1 = nodes.get(0);
        assertEquals(1, node1.getId());
        assertEquals("Client 1", node1.getLabel());
        assertEquals("node 1 tooltip Text", node1.getTitle());
        assertTrue(node1.getFixed());
        assertNotNull(node1.getColor());
        assertEquals("#cdffcd", node1.getColor().getBackground());

        GraphNode node4 = nodes.get(3);
        assertEquals(4, node4.getId());
        assertEquals("Aggregator", node4.getLabel());
        assertEquals("node 1 tooltip Text", node4.getTitle());
        assertNull(node4.getFixed());
        assertNotNull(node4.getColor());
        assertEquals("#cdffcd", node4.getColor().getBackground());

        GraphNode node13 = nodes.get(11);
        assertEquals(13, node13.getId());
        assertEquals("Paysource", node13.getLabel());
        assertEquals("node 1 tooltip Text", node13.getTitle());
        assertNull(node13.getFixed());
        assertNotNull(node13.getColor());
        assertEquals("#CF9FFF", node13.getColor().getBackground());
    }
}
