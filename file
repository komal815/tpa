public  void extractUniqueIdToXmitIdDetails(final InputStream fileInputStream) throws IOException {
        Map<String, Integer> columnIndexMap = new HashMap<>();
        try (Workbook workbook = new XSSFWorkbook(fileInputStream)) {

            Sheet sheet = workbook.getSheetAt(0);
            log.info("sheet name {}", sheet.getSheetName());
            Row headerRow = sheet.getRow(0);
            for (Cell cell : headerRow) {
                String headerName = cell.getStringCellValue().trim();
                if (Arrays.stream(columnsNames).toList().contains(headerName)) {
                    columnIndexMap.put(headerName, cell.getColumnIndex());
                }
            }

            if (columnIndexMap.size() < columnsNames.length) {
                throw new IllegalArgumentException("One or more columns not found in sheet");
            }

            for (Row row : sheet) {
                String e2eId = "";
                String xmitId = "";
                String msgId = "";
                if (row.getRowNum() == 0) {
                    continue;
                }
                for (String columnName : columnsNames) {

                    Integer colIndex = columnIndexMap.get(columnName);
                    if (colIndex != null) {
                        Cell cell = row.getCell(colIndex);
                        String cellValue = getStringValueOfCell(cell);
                        if ("MSG_ID".equalsIgnoreCase(columnName)) {
                            msgId = cellValue.trim();
                        } else if ("REL_TRN_REF".equalsIgnoreCase(columnName)) {
                            e2eId = cellValue.trim();
                        } else if ("XMIT_ID".equalsIgnoreCase(columnName)) {
                            xmitId = cellValue.trim();
                        }
                    }
                }
                String uniqueKey = msgId + "_" + e2eId;
                SCICache.uniqueKeyToXmitIdMap.put(uniqueKey, xmitId);
                log.info("xmitId {} and e2eId are {}",xmitId,e2eId);
            }
        }
    }
