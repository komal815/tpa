<!DOCTYPE html>
<html>
<head>
    <title>Vis.js Network Example</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
    <style type="text/css">
        #mynetwork {
            width: 800px;
            height: 600px;
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
    <div>
        <select id="directionFilter">
            <option value="all">All</option>
            <option value="incoming">Incoming</option>
            <option value="outgoing">Outgoing</option>
        </select>
    </div>
    <div id="mynetwork"></div>

    <script type="text/javascript">
        // Create an array with nodes
        var nodes = new vis.DataSet([
            { id: 1, label: 'Node 1' },
            { id: 2, label: 'Node 2' },
            { id: 3, label: 'Node 3' },
            { id: 4, label: 'Node 4' },
            { id: 5, label: 'Node 5' }
        ]);






import React, { useState, useEffect, useRef } from 'react';
import { DataSet, Network } from 'vis-network';

const NetworkGraph = ({ nodesData, edgesData }) => {
  const visJsRef = useRef(null);
  const [network, setNetwork] = useState(null);
  const [filteredNodes, setFilteredNodes] = useState(nodesData);

  useEffect(() => {
    if (visJsRef.current && filteredNodes) {
      const data = {
        nodes: new DataSet(filteredNodes),
        edges: new DataSet(edgesData),
      };
      const options = {};
      setNetwork(new Network(visJsRef.current, data, options));
    }
  }, [visJsRef, filteredNodes, edgesData]);

  const filterNodes = (direction) => {
    const filtered = nodesData.filter(node => {
      if (direction === 'incoming') {
        return edgesData.some(edge => edge.to === node.id);
      } else if (direction === 'outgoing') {
        return edgesData.some(edge => edge.from === node.id);
      }
      return true;
    });
    setFilteredNodes(filtered);
  };

  return (
    <div>
      <select onChange={(e) => filterNodes(e.target.value)}>
        <option value="incoming">Incoming</option>
        <option value="outgoing">Outgoing</option>
      </select>
      <div ref={visJsRef} style={{ height: '500px' }} />
    </div>
  );
};

export default NetworkGraph;


        // Create an array with edges
        var edges = new vis.DataSet([
            { from: 1, to: 2 },
            { from: 1, to: 3 },
            { from: 2, to: 4 },
            { from: 2, to: 5 },
            { from: 3, to: 5 }
        ]);

        // Create a network
        var container = document.getElementById('mynetwork');
        var data = {
            nodes: nodes,
            edges: edges
        };
        var options = {};
        var network = new vis.Network(container, data, options);

        // Add event listener to the drop-down
        document.getElementById('directionFilter').addEventListener('change', function() {
            var selectedValue = this.value;
            filterNodes(selectedValue);
        });

        function filterNodes(direction) {
            var filteredNodes = new vis.DataSet(nodes.get());

            if (direction === 'incoming') {
                // Get nodes with incoming edges
                var incomingNodes = new Set(edges.get().map(edge => edge.to));
                filteredNodes = new vis.DataSet(nodes.get().filter(node => incomingNodes.has(node.id)));
            } else if (direction === 'outgoing') {
                // Get nodes with outgoing edges
                var outgoingNodes = new Set(edges.get().map(edge => edge.from));
                filteredNodes = new vis.DataSet(nodes.get().filter(node => outgoingNodes.has(node.id)));
            }

            // Update the network with the filtered nodes
            network.setData({
                nodes: filteredNodes,
                edges: edges
            });
        }
    </script>
</body>
</html>


 public List<GraphNode> getAllNodes(final List<ClientSetupNode> clientSetupNodeList){
        final List<GraphNode> nodes= new ArrayList<>();
        final boolean[] conditionMetForAfs = { false };
        final boolean[] conditionMetForPaysource = { false };

        clientSetupNodeList.forEach(e ->{
            final String id = e.getTpaSeqId();
            final String label = e.getTpaSeqId();
            final String title = e.getDirection();
            String color = colorPalette.get(0);
            final String content = e.toString();
            if(!conditionMetForAfs[0]) {
                if (e.isAFSReleasedTpa() == true) {
                    nodes.add(GraphNode.builder().id("1").label("AFS").title("AFS_Released_TPA").content("AFS_Released_TPA")
                            .color(Color.builder().background("#CF9FFF").build()).x(-300).y(10).shape("ellipse").font(
                                    Font.builder().size(40).build()).build());
                    conditionMetForAfs[0] = true;
                }
            } else if (!conditionMetForPaysource[0]) {
                if (e.isPaysourceSenderTPA()==true) {
                    nodes.add(GraphNode.builder().id("2").label("Paysource").title("Paysource").content("Paysource").color(
                            Color.builder().background("blue").build()).x(-300).y(10).shape("ellipse").font(
                            Font.builder().size(40).build()).build());
                    conditionMetForPaysource[0]=true;
                }
            }
            nodes.add(GraphNode.builder().id(id).label(label).title(title).content(content).color(
                    Color.builder().background(color).build()).build());

        });
//        nodes.get(0).setFixed(true);
        return nodes;
    }
